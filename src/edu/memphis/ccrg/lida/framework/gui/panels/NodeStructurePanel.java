/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NodeStructurePanel.java
 *
 * Created on 17/08/2009, 08:55:55
 */

package edu.memphis.ccrg.lida.framework.gui.panels;

import java.awt.Dimension;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.Icon;

import org.apache.commons.collections15.Transformer;

import edu.memphis.ccrg.lida.framework.Lida;
import edu.memphis.ccrg.lida.framework.LidaModule;
import edu.memphis.ccrg.lida.framework.ModuleType;
import edu.memphis.ccrg.lida.framework.gui.utils.GuiLink;
import edu.memphis.ccrg.lida.framework.gui.utils.NodeIcon;
import edu.memphis.ccrg.lida.framework.gui.utils.NodeStructureGuiAdapter;
import edu.memphis.ccrg.lida.framework.shared.Activatible;
import edu.memphis.ccrg.lida.framework.shared.Link;
import edu.memphis.ccrg.lida.framework.shared.Linkable;
import edu.memphis.ccrg.lida.framework.shared.Node;
import edu.memphis.ccrg.lida.framework.shared.NodeStructure;
import edu.memphis.ccrg.lida.framework.shared.NodeStructureImpl;
import edu.memphis.ccrg.lida.pam.PamNode;
import edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl;
import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.layout.util.Relaxer;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;

/**
 * 
 * @author Javier Snaider
 */
public class NodeStructurePanel extends LidaPanelImpl {

	private static final long serialVersionUID = 1L;
	private NodeStructureGuiAdapter guiGraph=new NodeStructureGuiAdapter(new NodeStructureImpl());
	private VisualizationViewer<Linkable, GuiLink> vv;
	
	/** Creates new form NodeStructurePanel */
	public NodeStructurePanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jToolBar1 = new javax.swing.JToolBar();
		refreshButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();

		jToolBar1.setRollover(true);

		refreshButton.setText("refresh");
		refreshButton.setFocusable(false);
		refreshButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		refreshButton
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(refreshButton);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400,
				Short.MAX_VALUE).addComponent(jScrollPane1,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jToolBar1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												25,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												269, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
		refresh();
	}// GEN-LAST:event_refreshButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JButton refreshButton;

	// End of variables declaration//GEN-END:variables

	private void draw() {
		// The Layout<V, E> is parameterized by the vertex and edge types

		Layout<Linkable, GuiLink> layout = new FRLayout<Linkable, GuiLink>(guiGraph);
		layout.setSize(new Dimension(300, 300)); // sets the initial size of the
		// The BasicVisualizationServer<V,E> is parameterized by the edge types
		vv = new VisualizationViewer<Linkable, GuiLink>(
				layout);
		vv.setPreferredSize(new Dimension(350, 350)); // Sets the viewing area
														// size
		// Show vertex and edge labels
		vv.getRenderContext().setVertexLabelTransformer(
				new Transformer<Linkable, String>() {
					public String transform(final Linkable l) {
						if (l instanceof Link) {
							return ((Link) l).getType().toString();
						}
						return l.toString();
					}
				});

		// vv.getRenderContext().setEdgeLabelTransformer(new
		// ToStringLabeller<GuiLink>());
		// Create a graph mouse and add it to the visualization component
		DefaultModalGraphMouse<Linkable, GuiLink> gm2 = new DefaultModalGraphMouse<Linkable, GuiLink>();
		gm2.setMode(ModalGraphMouse.Mode.TRANSFORMING);
		vv.getRenderContext().setVertexIconTransformer(
				new Transformer<Linkable, Icon>() {
					/*
					 * Implements the Icon interface to draw an Icon with
					 * background color
					 */
					public Icon transform(final Linkable v) {
						if (v instanceof Node) {
							return NodeIcon.NODEICON;
						} else {
							return NodeIcon.LINKICON;
						}
					}
				});
		vv.setVertexToolTipTransformer(new Transformer<Linkable, String>() {
			public String transform(final Linkable l) {
				String tip = null;
				if (l instanceof Activatible) {
					if(l instanceof PamNode){
						PamNode pn=(PamNode)l;
						tip ="<html><b>"+pn.toString() + "</b><br /> Activation: " + pn.getActivation()+ 
						"<br /> BaseActivation: " + pn.getBaselevelActivation()+ "<br /> Threshold: " + pn.getSelectionThreshold()+"</html>";
						
					}else{
					Activatible n = (Activatible) l;
					tip ="<html><b>"+n.toString() + "</b><br /> Activation: " + n.getActivation()+"</html>";
					}
				}
				return tip;
			}
		});
		vv.setEdgeToolTipTransformer(new Transformer<GuiLink, String>() {
			public String transform(final GuiLink l) {
				String tip = null;
				GuiLink gl = (GuiLink) l;
				Link n = gl.getLink();
				tip ="<html><b>"+n.toString() + "</b><br /> Activation: " + n.getActivation()+"</html>";
				return tip;
			}
		});

		vv.setGraphMouse(gm2);

		jScrollPane1.setViewportView(vv);
		vv.fireStateChanged();
		// // Trying out our new popup menu mouse plugin...
		// PopupVertexEdgeMenuMousePlugin myPlugin = new
		// PopupVertexEdgeMenuMousePlugin();
		// // Add some popup menus for the edges and vertices to our mouse
		// plugin.
		// JFrame frame = new JFrame("Editing and Mouse Menu Demo");
		// JPopupMenu edgeMenu = new MyMouseMenus.EdgeMenu(frame);
		// JPopupMenu vertexMenu = new MyMouseMenus.VertexMenu();
		// myPlugin.setEdgePopup(edgeMenu);
		// myPlugin.setVertexPopup(vertexMenu);
		// //gm.remove(gm.getPopupEditingPlugin());
		// gm.add(myPlugin); // Add our new plugin to the mouse
		// vv.setGraphMouse(gm);
		// gm.setMode(ModalGraphMouse.Mode.EDITING);
	}

//	private Graph<Linkable, GuiLink> getGraph() {
//		NodeStructure struct = ((PerceptualAssociativeMemoryImpl) lida.getPam())
//				.getNodeStructure();
//		guiGraph = new NodeStructureGuiAdapter(struct);
//		return guiGraph;
//	}

	
	public void initPanel(String[]param){
		ModuleType moduleType=null;
		if (param==null || param.length==0){
		logger.log(Level.WARNING,"Error initializing NodeStructure Panel, not enough parameters.",0L);
		return;
		}
		try{
		 moduleType= ModuleType.valueOf(param[0]);
		}catch (Exception e){
			logger.log(Level.WARNING,"Error initializing NodeStructure Panel, Parameter is not a ModuleType.",0L);
			return;
		}
		LidaModule module = lida.getModule(moduleType);
		if (module==null){
			logger.log(Level.WARNING,"Error initializing NodeStructure Panel, Module does not exist in LIDA.",0L);
			return;			
		}
		for (int i=1; i<param.length;i++){
			try{
				 moduleType= ModuleType.valueOf(param[i]);
				}catch (Exception e){
					logger.log(Level.WARNING,"Error initializing NodeStructure Panel, Parameter is not a ModuleType.",0L);
					return;
				}
			
			module=module.getSubmodule(moduleType);
			if (module==null){
				logger.log(Level.WARNING,"Error initializing NodeStructure Panel, SubModule "+moduleType+ " does not exist.",0L);
				return;			
			}
		}
		
		display(module.getModuleContent());
		draw();
	}
	
	public void refresh(){
		Layout<Linkable, GuiLink> layout = vv.getGraphLayout();
		layout.initialize();
		Relaxer relaxer = vv.getModel().getRelaxer();
		if(relaxer != null) {
			relaxer.stop();
			relaxer.prerelax();
			relaxer.relax();
		}
	}

	public void display(Object o) {
		if(o instanceof NodeStructure){
			guiGraph.setNodeStructure((NodeStructure) o);
		}
    }

	public void registerLida(Lida lida) {
		super.registerLida(lida);
	}
}