/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NodeStructurePanel.java
 *
 * Created on 17/08/2009, 08:55:55
 */

package edu.memphis.ccrg.lida.framework.gui.panels;

import java.awt.Dimension;

import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;

import org.apache.commons.collections15.Transformer;

import Samples.MouseMenu.GraphElements;
import Samples.MouseMenu.MyMouseMenus;
import Samples.MouseMenu.PopupVertexEdgeMenuMousePlugin;
import edu.memphis.ccrg.lida.framework.Lida;
import edu.memphis.ccrg.lida.framework.gui.utils.GuiLink;
import edu.memphis.ccrg.lida.framework.gui.utils.NodeIcon;
import edu.memphis.ccrg.lida.framework.gui.utils.NodeStructureGuiAdapter;
import edu.memphis.ccrg.lida.framework.shared.Link;
import edu.memphis.ccrg.lida.framework.shared.Linkable;
import edu.memphis.ccrg.lida.framework.shared.Node;
import edu.memphis.ccrg.lida.framework.shared.NodeStructure;
import edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl;
import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.EditingModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;

/**
 *
 * @author Javier Snaider
 */
public class NodeStructurePanel extends LidaPanelImpl {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** Creates new form NodeStructurePanel */
    public NodeStructurePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        refreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();

        jToolBar1.setRollover(true);

        refreshButton.setText("refresh");
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
    
    private void draw(){
		// The Layout<V, E> is parameterized by the vertex and edge types
		
		Layout<Linkable, GuiLink> layout = new FRLayout<Linkable, GuiLink>(getGraph());
		layout.setSize(new Dimension(300,300)); // sets the initial size of the space
		// The BasicVisualizationServer<V,E> is parameterized by the edge types
		VisualizationViewer<Linkable, GuiLink> vv =
		new VisualizationViewer<Linkable, GuiLink>(layout);
		vv.setPreferredSize(new Dimension(350,350)); //Sets the viewing area size
		// Show vertex and edge labels
		vv.getRenderContext().setVertexLabelTransformer(new Transformer<Linkable,String>(){
			public String transform (final Linkable l){
				if (l instanceof Link){
					return ((Link)l).getType().toString();
				}
				return l.toString();
			}		
		});
		
		//vv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller<GuiLink>());
		// Create a graph mouse and add it to the visualization component
		DefaultModalGraphMouse<Linkable, GuiLink> gm2 = new DefaultModalGraphMouse<Linkable, GuiLink>();
		gm2.setMode(ModalGraphMouse.Mode.TRANSFORMING);
	    vv.getRenderContext().setVertexIconTransformer(new Transformer<Linkable,Icon>() {	    	
	        	/*
	        	 * Implements the Icon interface to draw an Icon with background color
	        	 */
				public Icon transform(final Linkable v) {
					if (v instanceof Node){
						return NodeIcon.NODEICON;
					}else{
						return NodeIcon.LINKICON;
					}
				}
	    });
//		EditingModalGraphMouse gm = new EditingModalGraphMouse(vv.getRenderContext(), 
//                GraphElements.MyVertexFactory.getInstance(),
//               GraphElements.MyEdgeFactory.getInstance()); 
		vv.setGraphMouse(gm2);
		vv.getRenderContext().setLabelOffset(2);
		
		jScrollPane1.setViewportView(vv);
//		// Trying out our new popup menu mouse plugin...
//        PopupVertexEdgeMenuMousePlugin myPlugin = new PopupVertexEdgeMenuMousePlugin();
//        // Add some popup menus for the edges and vertices to our mouse plugin.
//        JFrame frame = new JFrame("Editing and Mouse Menu Demo");
//        JPopupMenu edgeMenu = new MyMouseMenus.EdgeMenu(frame);
//        JPopupMenu vertexMenu = new MyMouseMenus.VertexMenu();
//        myPlugin.setEdgePopup(edgeMenu);
//        myPlugin.setVertexPopup(vertexMenu);
//        //gm.remove(gm.getPopupEditingPlugin()); 
//        gm.add(myPlugin);   // Add our new plugin to the mouse
//        vv.setGraphMouse(gm);
//        gm.setMode(ModalGraphMouse.Mode.EDITING); 
	}
	private Graph<Linkable,GuiLink> getGraph(){
		NodeStructure struct = ((PerceptualAssociativeMemoryImpl) lida.getPam()).getNodeStructure();
		Graph<Linkable,GuiLink> g = new NodeStructureGuiAdapter(struct);
		return g;
	}

	public void registerLida(Lida lida){
		super.registerLida(lida);
		draw();
	}
}