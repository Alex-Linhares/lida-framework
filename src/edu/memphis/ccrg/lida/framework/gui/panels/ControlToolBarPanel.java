/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ControlToolBarPanel.java
 *
 * Created on 13/09/2009, 10:12:30
 */
package edu.memphis.ccrg.lida.framework.gui.panels;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JSlider;

import edu.memphis.ccrg.lida.framework.gui.FrameworkGui;
import edu.memphis.ccrg.lida.framework.gui.commands.Command;
import edu.memphis.ccrg.lida.framework.gui.commands.SetTimeScaleCommand;
import edu.memphis.ccrg.lida.framework.tasks.TaskManager;

/**
 * Implements the tool bar of the {@link FrameworkGui}. 
 * Can receive parameters for the tick slider min and max values.
 * @author Javier Snaider
 */
public class ControlToolBarPanel extends GuiPanelImpl {

    private static final Logger logger = Logger.getLogger(ControlToolBarPanel.class.getCanonicalName());
    private boolean isPaused = true;
    private int sliderMin = 0;
    private int sliderMax = 100;
    private int sliderStartValue = sliderMax - (sliderMax - sliderMin) / 2;
    private TaskManager tm;
    private final String PAUSED_LABEL = " Paused ";
    private final String RUNNING_LABEL = " Running ";

    /** Creates new form ControlToolBarPanel */
    public ControlToolBarPanel() {
        initComponents();
    }

    @Override
    public void initPanel(String[] params) {
        tm = agent.getTaskManager();
        sliderStartValue = tm.getTickDuration();
        if (params.length >= 1) {
            try {
                sliderMin = Integer.parseInt(params[0]);
                sliderMin = (sliderMin < sliderStartValue) ? sliderMin : sliderStartValue;
            } catch (NumberFormatException e) {
                logger.log(Level.WARNING, "Invalid Parameter {1}", new Object[]{0L, params[0]});
            }
        }
        if (params.length >= 2) {
            try {
                sliderMax = Integer.parseInt(params[1]);
                sliderMax = (sliderMax > sliderStartValue) ? sliderMax : sliderStartValue;
            } catch (NumberFormatException e) {
                logger.log(Level.WARNING, "Invalid Parameter {1}", new Object[]{0L, params[1]});
            }
        }

        tickDurationSlider.setMaximum(sliderMax);
        tickDurationSlider.setMinimum(sliderMin);
        tickDurationSlider.setValue(sliderStartValue);
        tickDurationTextField.setText(sliderStartValue + "");
        minStepDurationLabel.setText(sliderMin + "");
        maxStepDurationLabel.setText(sliderMax + "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        startPauseButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel3 = new javax.swing.JLabel();
        currentTickTextField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        ticksModeTB = new javax.swing.JToggleButton();
        addTicksButton = new javax.swing.JButton();
        tiksTB = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        tickDurationTextField = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        minStepDurationLabel = new javax.swing.JLabel();
        tickDurationSlider = new javax.swing.JSlider();
        maxStepDurationLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        toolbar.setRollover(true);
        toolbar.setPreferredSize(new java.awt.Dimension(50, 25));

        startPauseButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        startPauseButton.setText("Start / Pause ");
        startPauseButton.setToolTipText("Toggles system operation");
        startPauseButton.setFocusable(false);
        startPauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startPauseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPauseButtonActionPerformed(evt);
            }
        });
        toolbar.add(startPauseButton);

        statusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText(" Paused ");
        statusLabel.setToolTipText("System run status");
        toolbar.add(statusLabel);
        toolbar.add(jSeparator2);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel3.setText("Current tick: ");
        toolbar.add(jLabel3);

        currentTickTextField.setEditable(false);
        currentTickTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        currentTickTextField.setToolTipText("Current tick");
        currentTickTextField.setMaximumSize(new java.awt.Dimension(100, 24));
        currentTickTextField.setMinimumSize(new java.awt.Dimension(70, 24));
        currentTickTextField.setPreferredSize(new java.awt.Dimension(70, 24));
        toolbar.add(currentTickTextField);
        toolbar.add(jSeparator3);

        ticksModeTB.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        ticksModeTB.setText("Step mode");
        ticksModeTB.setToolTipText("Toggles step-by-step mode");
        ticksModeTB.setFocusable(false);
        ticksModeTB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ticksModeTB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ticksModeTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ticksModeTBActionPerformed(evt);
            }
        });
        toolbar.add(ticksModeTB);

        addTicksButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        addTicksButton.setText("Run ticks:");
        addTicksButton.setToolTipText("Runs system the number of ticks specified in adjacent text field.");
        addTicksButton.setFocusable(false);
        addTicksButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addTicksButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addTicksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTicksButtonActionPerformed(evt);
            }
        });
        toolbar.add(addTicksButton);

        tiksTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tiksTB.setText("0");
        tiksTB.setToolTipText("Enter a number of ticks here.  The system will run this number of ticks when adjacent 'Add' button is pressed and the system is in step mode.");
        tiksTB.setMaximumSize(new java.awt.Dimension(100, 24));
        tiksTB.setMinimumSize(new java.awt.Dimension(70, 24));
        tiksTB.setPreferredSize(new java.awt.Dimension(60, 24));
        toolbar.add(tiksTB);
        toolbar.add(jSeparator1);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel2.setText("Tick duration (ms): ");
        toolbar.add(jLabel2);

        tickDurationTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tickDurationTextField.setToolTipText("The system's current tick duration in milliseconds.");
        tickDurationTextField.setMaximumSize(new java.awt.Dimension(100, 24));
        tickDurationTextField.setMinimumSize(new java.awt.Dimension(50, 24));
        tickDurationTextField.setPreferredSize(new java.awt.Dimension(50, 24));
        tickDurationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tickDurationTextFieldActionPerformed(evt);
            }
        });
        toolbar.add(tickDurationTextField);
        toolbar.add(jSeparator4);

        minStepDurationLabel.setText(" 0");
        toolbar.add(minStepDurationLabel);

        tickDurationSlider.setToolTipText("Sets the tick duration of the system");
        tickDurationSlider.setMaximumSize(new java.awt.Dimension(150, 24));
        tickDurationSlider.setMinimumSize(new java.awt.Dimension(100, 24));
        tickDurationSlider.setPreferredSize(new java.awt.Dimension(100, 24));
        tickDurationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tickDurationSliderStateChanged(evt);
            }
        });
        toolbar.add(tickDurationSlider);

        maxStepDurationLabel.setText("100");
        toolbar.add(maxStepDurationLabel);
        toolbar.add(jPanel1);

        add(toolbar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tickDurationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tickDurationTextFieldActionPerformed
        String sSleepTime = tickDurationTextField.getText();
        int tickDuration = tm.getTickDuration();
        try {
            tickDuration = Integer.parseInt(sSleepTime);
        } catch (NumberFormatException e) {
        }

        if (tickDuration < tickDurationSlider.getMinimum() || tickDuration > tickDurationSlider.getMaximum()) {
            tickDuration = tm.getTickDuration();
        }
        if (tickDuration >= 0) {
            tickDurationTextField.setText(tickDuration + "");
            tickDurationSlider.setValue(tickDuration);
            // Another way to execute commands
            Command command = new SetTimeScaleCommand();
            command.setParameter("tickDuration", tickDuration);
            controller.executeCommand(command);
            refresh();
        }
    }//GEN-LAST:event_tickDurationTextFieldActionPerformed

    /*
     * Sends pauseRunningThreads and resumeRunningThreads commands
     * @param evt
     */
    private void startPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        isPaused = !isPaused;
        if (isPaused) {
            statusLabel.setText(PAUSED_LABEL);
            controller.executeCommand("pauseRunningThreads", null);
        } else {
            statusLabel.setText(RUNNING_LABEL);
            controller.executeCommand("resumeRunningThreads", null);
        }
        refresh();
    }

    /*
     * Changes TaskManager's tick Duration using SetTimeScaleCommand
     * @param evt
     */
    private void tickDurationSliderStateChanged(javax.swing.event.ChangeEvent evt) {
        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int sleepTime = source.getValue();
            tickDurationTextField.setText(sleepTime + "");
            // Another way to execute commands
            Command command = new SetTimeScaleCommand();
            command.setParameter("tickDuration", sleepTime);
            controller.executeCommand(command);
            refresh();
        }
    }

    /*
     * Adds ticks for execution during ticks mode. using AddTicksCommand
     * @param evt
     */
    private void addTicksButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (ticksModeTB.isSelected()) {
            Map<String, Object> parameters = new HashMap<String, Object>();
            int ticks;
            try {
                ticks = Integer.parseInt(tiksTB.getText());
            } catch (NumberFormatException e) {
                ticks = 0;
            }
            parameters.put("ticks", ticks);
            controller.executeCommand("AddTicks", parameters);

            if (isPaused) {
                isPaused = !isPaused;
                statusLabel.setText(RUNNING_LABEL);
                controller.executeCommand("resumeRunningThreads", null);
            }
        }
    }

    /*
     * Toggles the TaskManager's ticks mode using the EnableTicksMode command.
     * @param evt
     */
    private void ticksModeTBActionPerformed(java.awt.event.ActionEvent evt) {
        Map<String, Object> parameters = new HashMap<String, Object>();
        parameters.put("enable", ticksModeTB.isSelected());
        controller.executeCommand("EnableTicksMode", parameters);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTicksButton;
    private javax.swing.JTextField currentTickTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JLabel maxStepDurationLabel;
    private javax.swing.JLabel minStepDurationLabel;
    private javax.swing.JButton startPauseButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JSlider tickDurationSlider;
    private javax.swing.JTextField tickDurationTextField;
    private javax.swing.JToggleButton ticksModeTB;
    private javax.swing.JTextField tiksTB;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
        if (isPaused) {
            statusLabel.setText(PAUSED_LABEL);
        } else {
            statusLabel.setText(RUNNING_LABEL);
        }
        currentTickTextField.setText(TaskManager.getCurrentTick() + "");
    }
}
