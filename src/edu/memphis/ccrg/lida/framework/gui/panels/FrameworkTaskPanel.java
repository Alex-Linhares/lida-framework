/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PropertiesPanel.java 
 *
 * Created on 14/08/2009, 13:37:17
 */
package edu.memphis.ccrg.lida.framework.gui.panels;

import java.util.Collection;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.table.AbstractTableModel;

import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.gui.utils.GuiUtils;
import edu.memphis.ccrg.lida.framework.tasks.FrameworkTask;
import edu.memphis.ccrg.lida.framework.tasks.TaskManager;

/**
 * A {@link GuiPanel} which displays the {@link FrameworkTask}s which are controlled by
 * the {@link TaskSpawner} associated with a particular {@link FrameworkModule}.
 * 
 * @author Javier Snaider
 */
public class FrameworkTaskPanel extends GuiPanelImpl {

	private static final Logger logger = Logger.getLogger(FrameworkTaskPanel.class
			.getCanonicalName());
	private Collection<FrameworkTask> tasks;
	private FrameworkTask[] taskArray;
	private FrameworkModule module;

	/**
	 * creates new {@link FrameworkTaskPanel}
	 */
	public FrameworkTaskPanel() {
		initComponents();
		tasks = new HashSet<FrameworkTask>();
		taskArray = tasks.toArray(new FrameworkTask[0]);
	}
	
	@Override
	public void initPanel(String[] param) {
		if (param == null || param.length == 0) {
			logger.log(Level.WARNING,
					"Error initializing FrameworkTaskPanel, not enough parameters.",
					0L);
			return;
		}

		module = GuiUtils.parseFrameworkModule(param[0], agent);
		refresh();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		tasksTable = new javax.swing.JTable();
		jToolBar1 = new javax.swing.JToolBar();
		ApplyButton = new javax.swing.JButton();

		tasksTable.setModel(new TaskTableModel());
		jScrollPane1.setViewportView(tasksTable);

		jToolBar1.setRollover(true);

		ApplyButton.setText("Refresh");
		ApplyButton.setFocusable(false);
		ApplyButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		ApplyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		ApplyButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ApplyButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(ApplyButton);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400,
				Short.MAX_VALUE).addComponent(jScrollPane1,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jToolBar1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												25,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												269, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		refresh();
	}// GEN-LAST:event_ApplyButtonActionPerformed

	@Override
	public void refresh() {
		if(module != null){
			display(module.getAssistingTaskSpawner().getRunningTasks());
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public void display(Object o) {
		logger.log(Level.FINEST, "Refreshing display", TaskManager
				.getCurrentTick());
		if (o instanceof Collection) {
			tasks = (Collection<FrameworkTask>) o;

			taskArray = tasks.toArray(new FrameworkTask[0]);

			((AbstractTableModel) tasksTable.getModel()).fireTableDataChanged();
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton ApplyButton;
	// private javax.swing.JButton LoadButton;
	private javax.swing.JTable tasksTable;
	// private javax.swing.JButton SaveButton;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar jToolBar1;

	// End of variables declaration//GEN-END:variables

	/*
	 * This TaskTableModel adapts the collection of FrameworkTasks to an
	 * AbstractTableModel
	 */
	private class TaskTableModel extends AbstractTableModel {

		private int columnCnt = 6;

		@Override
		public int getColumnCount() {
			return columnCnt;
		}

		@Override
		public int getRowCount() {
			return taskArray.length;
		}

		@Override
		public String getColumnName(int column) {
			String cName = "";
			switch (column) {
			case 0:
				cName = "Task ID";
				break;
			case 1:
				cName = "Activation";
				break;
			case 2:
				cName = "Status";
				break;
			case 3:
				cName = "description";
				break;
			case 4:
				cName = "Scheduled Tick";
				break;
			case 5:
				cName = "Next ticksPerStep";	
				break;
			default:
				cName = "col" + column;
			}
			return cName;
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			FrameworkTask task = taskArray[rowIndex];
			Object o = null;
			switch (columnIndex) {
			case 0:
				o = task.getTaskId();
				break;
			case 1:
				o = Math.round(task.getActivation() * 1000.0) / 1000.0;
				break;
			case 2:
				o = task.getTaskStatus();
				break;
			case 3:
				o = task;
				break;
			case 4:
				o = task.getScheduledTick();
				break;
			case 5:
				o=task.getNextTicksPerStep();
				break;
			default:
				o = "";
			}
			return o;
		}

		@Override
		public void setValueAt(Object value, int row, int column) {
		}

		@Override
		public boolean isCellEditable(int row, int column) {
			return false;
		}
	}

}
