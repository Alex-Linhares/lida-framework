/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/
package edu.memphis.ccrg.lida.framework.gui.panels;

import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.GroupLayout;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.AbstractTableModel;

import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.ModuleName;
import edu.memphis.ccrg.lida.framework.shared.Node;
import edu.memphis.ccrg.lida.framework.shared.NodeStructure;
import edu.memphis.ccrg.lida.globalworkspace.BroadcastContent;
import edu.memphis.ccrg.lida.globalworkspace.BroadcastListener;
import edu.memphis.ccrg.lida.globalworkspace.Coalition;
import edu.memphis.ccrg.lida.globalworkspace.triggers.BroadcastTrigger;

/**
 * This is a Panel which shows all current coalitions in Global Workspace and
 * also the most recent broadcast.
 * 
 * @author Siminder Kaur
 */
public class GlobalWorkspaceTablePanel extends GuiPanelImpl implements
        BroadcastListener {

    private static final Logger logger = Logger.getLogger(GlobalWorkspaceTablePanel.class.getCanonicalName());
    private Collection<Coalition> coalitions;
    private Coalition[] coalitionArray = new Coalition[0];
    private NodeStructure broadcastContent;
    private double winnerCoalActivation;
    private BroadcastTrigger lastBroadcastTrigger;
    private FrameworkModule module;

    /** Creates new form NodeStructureTable */
    public GlobalWorkspaceTablePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        refreshButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        winnersPane = new javax.swing.JScrollPane();
        winnersTable = new javax.swing.JTable();
        coalitionsPane1 = new javax.swing.JScrollPane();
        coalitionsTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(500, 291));

        jToolBar1.setRollover(true);

        refreshButton.setText("Refresh");
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        winnersTable.setModel(new WinnerCoalitionsTableModel());
        winnersPane.setViewportView(winnersTable);

        jSplitPane1.setRightComponent(winnersPane);

        coalitionsTable.setModel(new CoalitionsTableModel());
        coalitionsPane1.setViewportView(coalitionsTable);

        jSplitPane1.setLeftComponent(coalitionsPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1132, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane coalitionsPane1;
    private javax.swing.JTable coalitionsTable;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JScrollPane winnersPane;
    private javax.swing.JTable winnersTable;
    // End of variables declaration//GEN-END:variables

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }// GEN-LAST:event_refreshButtonActionPerformed

    @Override
    public void initPanel(String[] param) {
        module = agent.getSubmodule(ModuleName.GlobalWorkspace);
        if (module == null) {
            logger.log(
                    Level.WARNING,
                    "Error initializing NodeStructure Panel, Module does not exist in agent.",
                    0L);
            return;
        }
        module.addListener(this);

    }

    @Override
    public void refresh() {
        display(module.getModuleContent("coalitions"));
    }

    private class CoalitionsTableModel extends AbstractTableModel {

        private String[] columNames = {"Coalition", "Activation",
            "Creating AttentionCodelet", "Coalition NodeStructure", "Sought Content"};
        private DecimalFormat df = new DecimalFormat("0.0000");

        @Override
        public int getColumnCount() {
            return columNames.length;
        }

        @Override
        public int getRowCount() {
            return (coalitions.size());
        }

        @Override
        public String getColumnName(int column) {
            if (column < columNames.length) {
                return columNames[column];
            }
            return "";
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {

            if (coalitions.isEmpty()) {
                return null;
            }

            if (rowIndex > coalitions.size() || columnIndex > columNames.length
                    || rowIndex < 0 || columnIndex < 0) {
                return null;
            }
            Coalition coal = coalitionArray[rowIndex];

            switch (columnIndex) {
                case 0:
                    return coal;
                case 1:
                    return df.format(coal.getActivation());
                case 2: {
                    return coal.getAttentionCodelet();
                }
                case 3: {
                    return coal.getContent();
//				Collection<Node> nodes = ((NodeStructure) coal.getContent())
//						.getNodes();
//				String nodesString = "";
//				for (Node n : nodes) {
//					nodesString = nodesString + n.getLabel() + "; ";
//				}
//				return nodesString;

                }
                case 4: {
                    return coal.getAttentionCodelet().getSoughtContent();
//						.getSoughtContent()
                    //				Collection<Node> nodes = coal.getAttentionCodelet()
//						.getSoughtContent().getNodes();
//				String nodesString = "";
//				for (Node n : nodes) {
//					nodesString = nodesString + n.getLabel() + "; ";
//				}
//				return nodesString;
//
                }
                default:
                    return "";
            }

        }
    }

    private class WinnerCoalitionsTableModel extends AbstractTableModel {
        private String[] columNames = {"Last Broadcast", "Coalition Activation",
            "Broadcast NodeStructure", "Broadcast Trigger"};
        private DecimalFormat df = new DecimalFormat("0.0000");

        @Override
        public int getColumnCount() {
            return columNames.length;
        }

        @Override
        public int getRowCount() {
            return (1);
        }

        @Override
        public String getColumnName(int column) {
            if (column < columNames.length) {
                return columNames[column];
            }
            return "";
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {

            if (rowIndex > 1 || columnIndex > columNames.length || rowIndex < 0
                    || columnIndex < 0 || broadcastContent == null) {
                return null;
            }

            switch (columnIndex) {
                case 0:
                    return broadcastContent;
                case 1: {
                    return df.format(winnerCoalActivation);
                }
                case 2: {
                    return broadcastContent;
//                    Collection<Node> nodes = broadcastContent.getNodes();
//                    String nodesString = "";
//                    for (Node n : nodes) {
//                        nodesString = nodesString + n.getLabel() + "; ";
//                    }
//                    return nodesString;

                }
                case 3: {
                    if(lastBroadcastTrigger!=null){
                        return lastBroadcastTrigger.getClass().getSimpleName();
                    }
                    return "";
                }
                default:
                    return "";
            }

        }
    }

    @Override
    public void display(Object o) {
        // Collections.unmodifiableCollection(coalitions)
        coalitions = (Collection<Coalition>) o;
        coalitionArray=coalitions.toArray(new Coalition[0]);

        ((AbstractTableModel) winnersTable.getModel()).fireTableStructureChanged();

        ((AbstractTableModel) coalitionsTable.getModel()).fireTableStructureChanged();
    }

    @Override
    public void learn(BroadcastContent bc) {
        // No learning in panel
    }

    @Override
    public void receiveBroadcast(BroadcastContent bc) {
        broadcastContent = (NodeStructure) bc;
        winnerCoalActivation = (Double) module.getModuleContent("winnerCoalActivation");
        lastBroadcastTrigger = (BroadcastTrigger) module.getModuleContent("lastBroadcastTrigger");
    }
}
