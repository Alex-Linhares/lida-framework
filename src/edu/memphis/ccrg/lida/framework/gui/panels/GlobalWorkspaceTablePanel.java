/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/

package edu.memphis.ccrg.lida.framework.gui.panels;

import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.AbstractTableModel;

import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.ModuleName;
import edu.memphis.ccrg.lida.framework.shared.Node;
import edu.memphis.ccrg.lida.framework.shared.NodeStructure;
import edu.memphis.ccrg.lida.globalworkspace.BroadcastContent;
import edu.memphis.ccrg.lida.globalworkspace.BroadcastListener;
import edu.memphis.ccrg.lida.globalworkspace.Coalition;
import edu.memphis.ccrg.lida.globalworkspace.triggers.BroadcastTrigger;

/**
 * This is a Panel which shows all current coalitions in Global Workspace and
 * also the most recent broadcast.
 * 
 * @author Siminder Kaur
 */
public class GlobalWorkspaceTablePanel extends GuiPanelImpl implements
		BroadcastListener {
	private static final Logger logger = Logger
			.getLogger(NodeStructureTable.class.getCanonicalName());
	private Collection<Coalition> coalitions;

	private NodeStructure broadcastContent;
	private double winnerCoalActivation;
	private BroadcastTrigger lastBroadcastTrigger;

	/** Creates new form NodeStructureTable */
	public GlobalWorkspaceTablePanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jToolBar1 = new javax.swing.JToolBar();
		refreshButton = new javax.swing.JButton();

		jToolBar1.setRollover(true);

		refreshButton.setText("refresh");
		refreshButton.setFocusable(false);
		refreshButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		refreshButton
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(refreshButton);

		scrollPane = new javax.swing.JScrollPane();

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addComponent(jToolBar1, GroupLayout.DEFAULT_SIZE, 450,
						Short.MAX_VALUE).addComponent(jScrollPane1,
						GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
				.addComponent(scrollPane, Alignment.TRAILING,
						GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup().addComponent(jToolBar1,
								GroupLayout.PREFERRED_SIZE, 25,
								GroupLayout.PREFERRED_SIZE).addPreferredGap(
								ComponentPlacement.RELATED).addComponent(
								jScrollPane1, GroupLayout.PREFERRED_SIZE, 208,
								GroupLayout.PREFERRED_SIZE).addPreferredGap(
								ComponentPlacement.RELATED).addComponent(
								scrollPane, GroupLayout.DEFAULT_SIZE, 55,
								Short.MAX_VALUE)));

		table_1 = new javax.swing.JTable();
		table_1.setModel(new NodeStructureTableModel2());
		scrollPane.setViewportView(table_1);

		// scrollPane.setRowHeaderView(table_1);
		this.setLayout(layout);

		table = new javax.swing.JTable();
		table.setModel(new NodeStructureTableModel());
		jScrollPane1.setViewportView(table);

		/*
		 * org.jdesktop.layout.GroupLayout layout = new
		 * org.jdesktop.layout.GroupLayout(this); this.setLayout(layout);
		 * layout.setHorizontalGroup(
		 * layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		 * .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 452,
		 * Short.MAX_VALUE) ); layout.setVerticalGroup(
		 * layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		 * .add(layout.createSequentialGroup() .addContainerGap()
		 * .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 331,
		 * Short.MAX_VALUE)) );
		 */
	}// </editor-fold>

	// Variables declaration - do not modify
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable table;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JButton refreshButton;
	// End of variables declaration
	private FrameworkModule module;
	private JScrollPane scrollPane;
	private JTable table_1;

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
		refresh();
	}// GEN-LAST:event_refreshButtonActionPerformed

	@Override
	public void initPanel(String[] param) {
		ModuleName moduleType = null;

		if (param == null || param.length == 0) {
			logger
					.log(
							Level.WARNING,
							"Error initializing NodeStructure Panel, not enough parameters.",
							0L);
			return;
		}
		String[] modules = param[0].split("\\.");

		moduleType = ModuleName.getModuleName(modules[0]);
		if (moduleType == null) {
			logger
					.log(
							Level.WARNING,
							"Error initializing NodeStructure Panel, Parameter is not a ModuleType.",
							0L);
			return;
		}
		module = agent.getSubmodule(moduleType);
		if (module == null) {
			logger
					.log(
							Level.WARNING,
							"Error initializing NodeStructure Panel, Module does not exist in agent.",
							0L);
			return;
		}
		module.addListener(this);

		display(module.getModuleContent());

		// draw();
	}

	@Override
	public void refresh() {
		display(module.getModuleContent());
	}

	private class NodeStructureTableModel extends AbstractTableModel {

		/**
		 * 
		 */
		private static final long serialVersionUID = 3902918248689475445L;
		private String[] columNames = { "Coalition", "Activation",
				"AttentionCodelet", "Coalition nodes", "Sought content" };

		@Override
		public int getColumnCount() {
			return columNames.length;
		}

		@Override
		public int getRowCount() {
			return (coalitions.size());
		}

		@Override
		public String getColumnName(int column) {
			if (column < columNames.length) {
				return columNames[column];
			}
			return "";
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {

			if (coalitions.size() == 0) {
				return null;
			}

			Coalition coal = null;
			if (rowIndex > coalitions.size() || columnIndex > columNames.length
					|| rowIndex < 0 || columnIndex < 0) {
				return null;
			}

			// Collection<Coalition> coals = coalitions.getNodes();
			Iterator<Coalition> it = coalitions.iterator();
			for (int i = 0; i <= rowIndex; i++) {
				if(it.hasNext()){
					coal = it.next();
				}
			}
			DecimalFormat df = new DecimalFormat("#.###");
			switch (columnIndex) {
			case 0:
				return coal.hashCode();
			case 1:
				return df.format(coal.getActivation());
			case 2: {
				return coal.getAttentionCodelet().hashCode();
			}
			case 3: {
				Collection<Node> nodes = ((NodeStructure) coal.getContent())
						.getNodes();
				String nodesString = "";
				for (Node n : nodes) {
					nodesString = nodesString + n.getLabel() + "; ";
				}
				return nodesString;

			}
			case 4: {
				Collection<Node> nodes = coal.getAttentionCodelet()
						.getSoughtContent().getNodes();
				String nodesString = "";
				for (Node n : nodes) {
					nodesString = nodesString + n.getLabel() + "; ";
				}
				return nodesString;

			}
			default:
				return "";
			}

		}
	}

	private class NodeStructureTableModel2 extends AbstractTableModel {

		/**
		 * 
		 */
		private static final long serialVersionUID = 3902918248689475445L;
		private String[] columNames = { "Last Broadcast", "Activation",
				"Broadcast nodes", "Broadcast Trigger" };

		@Override
		public int getColumnCount() {
			return columNames.length;
		}

		@Override
		public int getRowCount() {
			return (1);
		}

		@Override
		public String getColumnName(int column) {
			if (column < columNames.length) {
				return columNames[column];
			}
			return "";
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {

			if (rowIndex > 1 || columnIndex > columNames.length || rowIndex < 0
					|| columnIndex < 0 || broadcastContent == null) {
				return null;
			}

			switch (columnIndex) {
			case 0:
				return broadcastContent.hashCode();
			case 1: {
				return winnerCoalActivation;
			}
			case 2: {
				Collection<Node> nodes = broadcastContent.getNodes();
				String nodesString = "";
				for (Node n : nodes) {
					nodesString = nodesString + n.getLabel() + "; ";
				}
				return nodesString;

			}
			case 3: {
				return lastBroadcastTrigger.getClass().getSimpleName();
			}
			default:
				return "";
			}

		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public void display(Object o) {
		// Collections.unmodifiableCollection(coalitions)
		coalitions = (Collection<Coalition>) o;
		// nodeStructure = (NodeStructure) o;
		((AbstractTableModel) table.getModel()).fireTableStructureChanged();
		// ((AbstractTableModel) table.getModel()).fireTableDataChanged();
		((AbstractTableModel) table_1.getModel()).fireTableStructureChanged();

	}

	@Override
	public void learn(BroadcastContent bc) {
		// No learning in panel

	}

	@Override
	public void receiveBroadcast(BroadcastContent bc) {
		broadcastContent = (NodeStructure) bc;
		winnerCoalActivation = (Double) module
				.getModuleContent("winnerCoalActivation");
		lastBroadcastTrigger = (BroadcastTrigger) module
				.getModuleContent("lastBroadcastTrigger");
	}

}