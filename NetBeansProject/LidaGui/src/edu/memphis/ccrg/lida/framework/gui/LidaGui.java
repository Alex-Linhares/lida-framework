/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LidaGui.java
 *
 * Created on 12/07/2009, 08:47:40
 */

package edu.memphis.ccrg.lida.framework.gui;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JDialog;
import javax.swing.JPanel;

import edu.memphis.ccrg.lida.framework.Lida;
import edu.memphis.ccrg.lida.framework.gui.panels.LidaPanel;
//import edu.memphis.ccrg.lida.framework.gui.panels.LidaTaskPanel;

/**
 * 
 * @author Javier Snaider
 */
public class LidaGui extends javax.swing.JFrame {

	private static final long serialVersionUID = 100L;

	private List<LidaPanel> panels = new ArrayList<LidaPanel>();
	private Lida lida;
	private LidaGuiController controller;
	private Logger logger = Logger.getLogger("lida.framework.gui.LidaGui");

	public LidaGui(Lida lida, LidaGuiController controller, String panelsFile) {
		initComponents();
		this.lida = lida;
		this.controller = controller;

		if (panelsFile == null || panelsFile.equals("")) {
			panelsFile = "configs/guiPanels.properties";
		}
			
		loadPanels(panelsFile);
		pack();
		logger.info("LidaGUI started\n");
	}

	/**
	 * @param lida
	 * @param controller
	 * @param panelsFile
	 */
	private void loadPanels(String panelsFile) {
		Properties panelProp = new Properties();
		if (panelsFile != null) {
			try {
				panelProp.load(new BufferedReader(new FileReader(panelsFile)));
			} catch (FileNotFoundException e) {
				throw new IllegalArgumentException();
			} catch (IOException e) {
				logger.log(Level.SEVERE, "Error reading GuiPanels List {0}", e
						.getMessage());
			}
		} else {
			logger.log(Level.WARNING, "GuiPanels File no especified");
		}

		for (Object key : panelProp.keySet()) {
			LidaPanel panel;
			String line = panelProp.getProperty((String) key);
			String[] vals = line.split(","); // name,class,pos,refresh[Y/N]
			if (!(vals.length == 4)) {
				logger.warning("Error reading line for Panel " + key);
				continue;
			}
			try {
				panel = (LidaPanel) (Class.forName(vals[1])).newInstance();
			} catch (Exception e) {
				logger.warning(e.toString());
				continue;
			}
			panel.setName(vals[0]);
			panel.registrerLida(lida);
			panel.registrerLidaGuiController(controller);
			addLidaPanel(panel, vals[2]);
			panels.add(panel);
			if (vals[3].equalsIgnoreCase("Y")) {
				panel.refresh();
			}
		}
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jToggleButton1 = new javax.swing.JToggleButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jTabbedPanelR = new javax.swing.JTabbedPane();
        principalTabbedPanel = new javax.swing.JTabbedPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jToggleButton1.setText("jToggleButton1");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jToggleButton1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane2.setRightComponent(jTabbedPanelR);

        jSplitPane1.setLeftComponent(jSplitPane2);
        jSplitPane1.setRightComponent(principalTabbedPanel);
        principalTabbedPanel.getAccessibleContext().setAccessibleName("Visual");

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		//System.exit(0);
	}// GEN-LAST:event_exitMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPanelR;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTabbedPane principalTabbedPanel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
	
	
	/**
	 * Adds a Panel to the main GUI.
	 * 
	 * @param panel
	 *            the panel to add.
	 * @param panelPosition
	 *            Determines where the panel is going to be placed. </br>
	 *            A: Upper Left position. </br>
	 *            B: Lower Left position. </br>
	 *            TAB: In a new TAB. </br>
	 *            FLOAT: In a new frame. </br>
	 */
	private void addLidaPanel(LidaPanel panel, String panelPosition) {
		JPanel jPanel = panel.getPanel();
		if ("A".equals(panelPosition)) {
			jSplitPane2.setTopComponent(jPanel);
		} else if ("B".equals(panelPosition)) {
			jSplitPane2.setBottomComponent(jPanel);
		} else if ("TAB".equals(panelPosition)) {
			principalTabbedPanel.addTab(panel.getName(), jPanel);
		} else if ("FLOAT".equals(panelPosition)) {
			JDialog dialog=new JDialog(this,panel.getName());
			dialog.add(jPanel);
			dialog.pack();
			dialog.setVisible(true);
		} else {
			logger.warning("Position error for panel " + panel.getName()
					+ " pos:" + panelPosition);
		}
	}

	public Collection<LidaPanel> getPanels() {
		return Collections.unmodifiableCollection(panels);
	}


}
