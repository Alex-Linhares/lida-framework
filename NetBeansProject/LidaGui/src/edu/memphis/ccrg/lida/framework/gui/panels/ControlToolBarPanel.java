/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ControlToolBarPanel.java
 *
 * Created on 13/09/2009, 10:12:30
 */

package edu.memphis.ccrg.lida.framework.gui.panels;

import java.util.HashMap;
import java.util.Map;

import javax.swing.JSlider;

import edu.memphis.ccrg.lida.framework.Module;
import edu.memphis.ccrg.lida.framework.gui.commands.Command;
import edu.memphis.ccrg.lida.framework.gui.commands.SetTimeScaleCommand;
import edu.memphis.ccrg.lida.framework.gui.events.FrameworkGuiEvent;
import edu.memphis.ccrg.lida.framework.gui.events.FrameworkGuiEventListener;

/**
 *
 * @author Javier Snaider
 */
public class ControlToolBarPanel extends LidaPanelImpl implements FrameworkGuiEventListener{
  
    boolean isPaused = true;
	private int sliderMin = 0;
	private int sliderMax = 50;
	private int sliderStartValue = (sliderMax - sliderMin) / 2;

    /** Creates new form ControlToolBarPanel */
    public ControlToolBarPanel() {
        initComponents();
        setSupportedModule(Module.NoModule);

		//minSleepTimeLabel.setText(sliderMin + " ms");
		//maxSleepTimeLabel.setText(sliderMax + " ms");
		sleepTimeTextField.setText(this.sliderStartValue + "");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        toolbar = new javax.swing.JToolBar();
        ticksModeTB = new javax.swing.JToggleButton();
        addTicksButton = new javax.swing.JButton();
        tiksTB = new javax.swing.JTextField();
        speedSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        sleepTimeTextField = new javax.swing.JTextField();
        startPauseButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setLayout(new java.awt.BorderLayout());

        toolbar.setRollover(true);
        toolbar.setPreferredSize(new java.awt.Dimension(50, 25));

        ticksModeTB.setText("Ticks mode");
        ticksModeTB.setFocusable(false);
        ticksModeTB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ticksModeTB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ticksModeTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ticksModeTBActionPerformed(evt);
            }
        });
        toolbar.add(ticksModeTB);

        addTicksButton.setText("add ticks");
        addTicksButton.setFocusable(false);
        addTicksButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addTicksButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addTicksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTicksButtonActionPerformed(evt);
            }
        });
        toolbar.add(addTicksButton);

        tiksTB.setText("0");
        toolbar.add(tiksTB);

        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });
        toolbar.add(speedSlider);

        jLabel2.setText("Ticks Scale (ms)");
        toolbar.add(jLabel2);

        sleepTimeTextField.setText("--");
        toolbar.add(sleepTimeTextField);

        startPauseButton.setText("Start/Pause");
        startPauseButton.setFocusable(false);
        startPauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startPauseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPauseButtonActionPerformed(evt);
            }
        });
        toolbar.add(startPauseButton);

        statusLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18));
        statusLabel.setText("Paused");
        toolbar.add(statusLabel);

        add(toolbar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void startPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPauseButtonActionPerformed
        isPaused = !isPaused;
        if(isPaused){
            statusLabel.setText("PAUSED");
            controller.executeCommand("pauseRunningThreads", null);
        }else{
            statusLabel.setText("RUNNING");
            controller.executeCommand("resumeRunningThreads", null);
        }
        refresh();
}//GEN-LAST:event_startPauseButtonActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if(!source.getValueIsAdjusting()){
			int sleepTime = (int) source.getValue();
			sleepTimeTextField.setText(sleepTime + "");
			// Another way to execute commands
			Command command = new SetTimeScaleCommand();
			command.setParameter("timeScale", sleepTime);
			controller.executeCommand(command);
			refresh();        
			}
}//GEN-LAST:event_speedSliderStateChanged

    private void addTicksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTicksButtonActionPerformed
 		Map<String, Object> parameters = new HashMap<String, Object>();
		int ticks;
		try {
			ticks = Integer.parseInt(tiksTB.getText());
		} catch (NumberFormatException e) {
			ticks = 0;
		}
		parameters.put("ticks", ticks);
		controller.executeCommand("AddTicks", parameters);
}//GEN-LAST:event_addTicksButtonActionPerformed

    private void ticksModeTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ticksModeTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ticksModeTBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTicksButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField sleepTimeTextField;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton startPauseButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JToggleButton ticksModeTB;
    private javax.swing.JTextField tiksTB;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
	public void refresh() {
		//isPaused = lida.getTaskManager().isTasksPaused();
		if (isPaused)
			statusLabel.setText("PAUSED");
		else
			statusLabel.setText("RUNNING");
	}

	public void receiveGuiEvent(FrameworkGuiEvent event) {
	}
}
